package com.vireal.bot.handlers

import com.vireal.bot.service.BotService
import dev.inmo.tgbotapi.extensions.api.edit.text.editMessageText
import dev.inmo.tgbotapi.extensions.api.send.send
import dev.inmo.tgbotapi.extensions.behaviour_builder.BehaviourContext
import dev.inmo.tgbotapi.extensions.behaviour_builder.triggers_handling.onText
import dev.inmo.tgbotapi.extensions.utils.types.buttons.dataButton
import dev.inmo.tgbotapi.extensions.utils.types.buttons.inlineKeyboard
import dev.inmo.tgbotapi.types.message.abstracts.CommonMessage
import dev.inmo.tgbotapi.types.message.content.TextContent
import dev.inmo.tgbotapi.utils.row
import org.slf4j.LoggerFactory

object MessageHandlers {
    private val logger = LoggerFactory.getLogger(this::class.java)
    private val userStates = mutableMapOf<Long, UserState>()

    data class UserState(
        var lastMessage: String? = null,
        var waitingFor: WaitingState? = null
    )

    enum class WaitingState {
        NOTE_TEXT,
        SEARCH_QUERY,
        QUESTION
    }

    suspend fun register(context: BehaviourContext, botService: BotService) = with(context) {

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        onText { message ->
            val userId = message.chat.id.chatId
            val text = message.content.text

            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            if (text.startsWith("/")) return@onText

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            when (text) {
                "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É" -> {
                    send(message.chat, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
                    userStates[userId] = UserState(waitingFor = WaitingState.NOTE_TEXT)
                }
//
//                "üîç –ü–æ–∏—Å–∫" -> {
//                    send(message.chat, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
//                    userStates[userId] = UserState(waitingFor = WaitingState.SEARCH_QUERY)
//                }

                "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" -> {
                    send(message.chat, "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
                    userStates[userId] = UserState(waitingFor = WaitingState.QUESTION)
                }

//                "üìö –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏" -> {
//                    handleMyNotes(message, botService)
//                }
//
//                "üè∑ –¢–µ–≥–∏" -> {
//                    handleTags(message, botService)
//                }
//
//                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" -> {
//                    handleStats(message, botService)
//                }

                else -> {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    val state = userStates[userId]

                    when (state?.waitingFor) {
                        WaitingState.NOTE_TEXT -> {
                            handleAddNote(message, text, botService)
                            userStates.remove(userId)
                        }

                        WaitingState.SEARCH_QUERY -> {
                            handleSearch(message, text, botService)
                            userStates.remove(userId)
                        }

                        WaitingState.QUESTION -> {
                            handleQuestion(message, text, botService)
                            userStates.remove(userId)
                        }

                        else -> {
                            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                            userStates[userId] = UserState(lastMessage = text)

                            send(
                                message.chat,
                                "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º?",
                                replyMarkup = inlineKeyboard {
                                    row {
                                        dataButton("üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "save_note")
                                        dataButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "ask_question")
                                    }
                                    row {
                                        dataButton("‚ùå –û—Ç–º–µ–Ω–∞", "cancel")
                                    }
                                }
                            )
                        }
                    }
                }
            }
        }
    }

    private suspend fun BehaviourContext.handleAddNote(
        message: CommonMessage<TextContent>,
        text: String,
        botService: BotService
    ) {
        val userId = message.chat.id.chatId
        val tempMsg = send(message.chat, "‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–º–µ—Ç–∫—É...")

        try {
            val response = botService.createNote(userId, text)

            if (response.success) {
                editMessageText(
                    message.chat,
                    tempMsg.messageId,
                    "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
                )
            } else {
                editMessageText(
                    message.chat,
                    tempMsg.messageId,
                    "‚ùå –û—à–∏–±–∫–∞: ${response.message}"
                )
            }
        } catch (e: Exception) {
            logger.error("Error adding note", e)
            editMessageText(
                message.chat,
                tempMsg.messageId,
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
            )
        }
    }

    private suspend fun BehaviourContext.handleSearch(
        message: CommonMessage<TextContent>,
        query: String,
        botService: BotService
    ) {
        val userId = message.chat.id.chatId
        val tempMsg = send(message.chat, "üîç –ò—â—É...")

        try {
            val results = botService.searchNotes(userId, query)

            val resultText = if (results.notes.isEmpty()) {
                "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: $query"
            } else {
                buildString {
                    appendLine("–ù–∞–π–¥–µ–Ω–æ ${results.totalFound} –∑–∞–º–µ—Ç–æ–∫:")
                    results.notes.take(3).forEachIndexed { i, note ->
                        appendLine("${i+1}. ${note.content.take(100)}")
                    }
                }
            }

            editMessageText(message.chat, tempMsg.messageId, resultText)
        } catch (e: Exception) {
            logger.error("Error searching", e)
            editMessageText(message.chat, tempMsg.messageId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
        }
    }

    private suspend fun BehaviourContext.handleQuestion(
        message: CommonMessage<TextContent>,
        question: String,
        botService: BotService
    ) {
        val userId = message.chat.id.chatId
        val tempMsg = send(message.chat, "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")

        try {
            val response = botService.askQuestion(userId, question)
            editMessageText(
                message.chat,
                tempMsg.messageId,
                response.answer
            )
        } catch (e: Exception) {
            logger.error("Error processing question", e)
            editMessageText(
                message.chat,
                tempMsg.messageId,
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"
            )
        }
    }

    private suspend fun BehaviourContext.handleMyNotes(
        message: CommonMessage<TextContent>,
        botService: BotService
    ) {
        val userId = message.chat.id.chatId

        try {
            val notes = botService.getUserNotes(userId, 5)

            val text = if (notes.isEmpty()) {
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫"
            } else {
                buildString {
                    appendLine("üìö –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:")
                    notes.forEachIndexed { i, note ->
                        appendLine("${i+1}. ${note.content.take(100)}")
                    }
                }
            }

            send(message.chat, text)
        } catch (e: Exception) {
            logger.error("Error getting notes", e)
            send(message.chat, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫")
        }
    }

    private suspend fun BehaviourContext.handleTags(
        message: CommonMessage<TextContent>,
        botService: BotService
    ) {
        val userId = message.chat.id.chatId

        try {
            val tags = botService.getUserTags(userId)

            val text = if (tags.isEmpty()) {
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤"
            } else {
                "üè∑ –í–∞—à–∏ —Ç–µ–≥–∏:\n" + tags.joinToString(", ") { "#$it" }
            }

            send(message.chat, text)
        } catch (e: Exception) {
            logger.error("Error getting tags", e)
            send(message.chat, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤")
        }
    }

    private suspend fun BehaviourContext.handleStats(
        message: CommonMessage<TextContent>,
        botService: BotService
    ) {
        val userId = message.chat.id.chatId

        try {
            val count = botService.getNotesCount(userId)
            val tags = botService.getUserTags(userId)
            val categories = botService.getCategoryStats(userId)

            val text = buildString {
                appendLine("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                appendLine("üìù –ó–∞–º–µ—Ç–æ–∫: $count")
                appendLine("üè∑ –¢–µ–≥–æ–≤: ${tags.size}")
                appendLine("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.size}")
            }

            send(message.chat, text)
        } catch (e: Exception) {
            logger.error("Error getting stats", e)
            send(message.chat, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        }
    }

    fun getUserState(userId: Long): UserState? = userStates[userId]
    fun removeUserState(userId: Long) = userStates.remove(userId)
}